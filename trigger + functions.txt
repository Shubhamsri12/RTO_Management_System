--(T-1) To check the age of the new applicant

create or replace function check_age() 
returns trigger as $$
BEGIN
	if(age(new.dob) < interval '18 years') then
		return NULL;
	else
		return NEW.*;
	end if;
END $$ language 'plpgsql';

create trigger check_age_applicant
before insert on application
for each row execute procedure check_age();


--(T-2) To check avaibility of slot before booking an appointment



create or replace function slot_booking()
returns trigger as $slots_data$
declare
	i slot_details%ROWTYPE;
	t1 varchar(20);
	t2 varchar(6);
	code int;
BEGIN
	if(tg_op = 'INSERT') then
		t1 = concat(split_part(new.PurposeOfAppointment,' ',1),' ', split_part(new.PurposeOfAppointment,' ',2));
		t2 = split_part(new.PurposeOfAppointment,' ',3);
		if(t1 = 'License Test') then
			select RTO_code into code from RTO where district = new.place;
			select * into i from slot_details where Date = new.Date and Time = new.Time and RTO_code = code and slot_type = t2;
			if(i.slot_available >= 1) then
				update slot_details set slot_available = slot_available - 1 
				where Date = new.Date and Time = new.Time and RTO_code = code and slot_type = t2;
                                update application set attempt_no=attempt_no +1
                                where application_number= new.application_number;
				insert into slots_data select new.appointment_acknowledgment_number,'SLOT BOOKED',new.date,new.time,new.place;
				return NEW;
			else
				insert into slots_data select new.appointment_acknowledgment_number,'SLOT BOOKING FAILED',new.date,new.time,new.place;
				return NULL;
			END IF;
		else
			return new;
		END IF;
	else
		t1 = concat(split_part(old.PurposeOfAppointment,' ',1),' ', split_part(old.PurposeOfAppointment,' ',2));
		t2 = split_part(old.PurposeOfAppointment,' ',3);

		select RTO_code into code from RTO where district = old.place;
		
		update slot_details set slot_available = slot_available + 1 
		where Date = old.Date and Time = old.Time and RTO_code = code and slot_type = t2;
		return old;
	END IF;
	return NULL;
END $slots_data$ language 'plpgsql';

create trigger slot_add
before insert or delete on appointment
for each row execute procedure slot_booking();

--(T-3) When ownership is transferred, the new owner details will be added to vehicle table

create or replace function change_owner() 
returns trigger as $old_owner_data$
DECLARE
	c_no char(17);
	E_no char(17);
	name text;
BEGIN
	if(tg_op = 'INSERT') then
		select chassis_number,engine_number,owner into c_no,E_no,name from vehicle where registration_number = new.vehicle_no;
		if(name != new.previous_owner_name) then
			raise notice 'Owner not same';
			return null;
		end if;
		insert into old_owner_data select new.vehicle_no, new.previous_owner_name,new.previous_owner_aadhar_no,c_no,E_no;
		update vehicle set owner = new.new_owner_name where registration_number = new.vehicle_no;
		return new;
	elseif(tg_op = 'UPDATE') then
		if(old.new_owner_name != new.new_owner_name) then
			update vehicle set owner = new.new_owner_name where registration_number = new.vehicle_no;
			return new;
		elseif(old.previous_owner_name != new.previous_owner_name) then
			update old_owner_data set Name = new.previous_owner_name where Registration_number = new.vehicle_no;
			return new;
		end if;
	end if;
	return null;
END $old_owner_data$ language 'plpgsql';

create trigger change_owner
before insert or update of new_owner_name,previous_owner_name on ownership_transfer
for each row execute procedure change_owner();


--(SP-1) Procedure to check expiry date of license holders


create or replace function check_expiry()
returns SETOF holder_of_license as $expired_license$
DECLARE
	i holder_of_license%ROWTYPE;
BEGIN
	for i in select * from holder_of_license
	LOOP
		if(i.expiry_date <= CURRENT_DATE) then
			insert into expired_license select i.*;
			delete from holder_of_license where license_number = i.license_number;
			raise notice 'License Number = %',i.license_number;
			return next i;
		end if;
	END LOOP;
	return;
END $expired_license$ language 'plpgsql';

select * from check_expiry()


--(SP-2) Add penalty to the pending transaction from over 1 month.

create or replace function add_penalty() 
returns SETOF transaction as $BODY$
DECLARE
	i transaction%ROWTYPE;
BEGIN
	for i in select * from transaction
	LOOP
	if(i.status = 'Pending' and age(now(),i.date_and_time) > interval '1 month') then
		i.amount = i.amount + 5*i.amount/100;
		return NEXT i;
	END IF;
	END LOOP;
	return;
END $BODY$ language 'plpgsql';

select * from add_penalty()


--(SP-3) remove applications whose application have reached maximum no of attempts.

create or replace function remove_application() 
returns void as $BODY$
DECLARE
	i application%ROWTYPE;
        j int;
BEGIN
	for i in select * from application
	LOOP
        select max_no_of_attempt into j from application_type where Application_type_number = i.application_type_number;
	if(i.attempt_no > j) then
		delete from application where application_number = i.application_number;
		
	END IF;
	END LOOP;
	return;
END $BODY$ language 'plpgsql';
select * from remove_application();
